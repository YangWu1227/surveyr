// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// check_patterns
std::vector<bool> check_patterns(std::vector<std::string> mainstrs, std::vector<std::string> patterns);
RcppExport SEXP _citizenr_check_patterns(SEXP mainstrsSEXP, SEXP patternsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::string> >::type mainstrs(mainstrsSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type patterns(patternsSEXP);
    rcpp_result_gen = Rcpp::wrap(check_patterns(mainstrs, patterns));
    return rcpp_result_gen;
END_RCPP
}
// print_tbls
void print_tbls(List l, String output);
RcppExport SEXP _citizenr_print_tbls(SEXP lSEXP, SEXP outputSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type l(lSEXP);
    Rcpp::traits::input_parameter< String >::type output(outputSEXP);
    print_tbls(l, output);
    return R_NilValue;
END_RCPP
}

RcppExport SEXP run_testthat_tests(SEXP);

static const R_CallMethodDef CallEntries[] = {
    {"_citizenr_check_patterns", (DL_FUNC) &_citizenr_check_patterns, 2},
    {"_citizenr_print_tbls", (DL_FUNC) &_citizenr_print_tbls, 2},
    {"run_testthat_tests", (DL_FUNC) &run_testthat_tests, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_citizenr(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
